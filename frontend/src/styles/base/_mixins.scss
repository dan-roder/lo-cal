@mixin svg-bg($name) {
  background: url(/assets/#{$name}.png) no-repeat;
  background: none, url(/assets/#{$name}.svg) no-repeat;
}

@mixin fontsize($number) {
  font-size: $number + px; //this line can be commented out if we're not supporting IE8
  font-size: $number/$base-font-size + rem;
}

@mixin stagecenter($stage-width: $max-stage-width, $container-font-size: $base-font-size) {
  margin-left: auto;
  margin-right: auto;
  padding-left: 15px;
  padding-right: 15px;
  max-width: #{$stage-width}px;
  .no-mediaqueries & {
    width: #{$stage-width}px;
  }
}

@mixin vertical-align {
  position: relative;
  top: 50%;
  transform: translateY(-50%);
  -webkit-transform: translateY(-50%);
}

@mixin placeholder($c-placeholder: '#888888') {
  input::-webkit-input-placeholder,
  textarea::-webkit-input-placeholder {
    color: $c-placeholder;
  }

  input:-moz-placeholder,
  textarea:-moz-placeholder {
    color: $c-placeholder;
  }

  input.placeholder_text,
  textarea.placeholder_text {
    color: $c-placeholder;
  }
}

@mixin gradient-hor($color1, $color2) {
  background: $color2; //fallback; it could just as easily be $color1
  background: linear-gradient(to bottom,  $color1 0%,$color2 100%); //god bless autoprefixer
}

@mixin gradient-vert($color1, $color2) {
  background: $color2; //fallback; it could just as easily be $color1
  background: linear-gradient(to right,  $color1 0%,$color2 100%);
}

@mixin transform($var) {
  transform: $var;
}

@mixin transition($property: all, $timing: 300ms, $easing: ease-in-out) {
  transition: $property $timing $easing;
}

@mixin overlay($opacity: .7){
  position: relative;

  &:before{
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    content: '';
    background: rgba($c-black, $opacity);
  }
}

/**
 *
 * This method returns the content wrapped in the requested media query. It also checks to see if
 * the no-query variable has been defined. If the variable exists the content is output and wrapped
 * in a class as defined by the variable.
 *
 * The $no-query defined class is to wrap content in when there are no media queries available for
 * the current browser. This is typically provided by a javascript plugin like modernizr.
 *
 * $bp: The breakpoint in pixels
 *
 * $no-ie: To override this breakpoint and not use it in browsers that don't support media queries
 * pass true as the second argument.
 *
 */
@mixin breakpoint($bp, $no-ie: false) {

  // Pass the given content and wrap it in a min-width media query
  @media (min-width: #{$bp}) {
    // The content contained within the call to our mixin
    @content;
  }

  // Check to see if we have defined the no-query variable
  @if variable-exists(no-query) and $no-ie == false {
    // If media queries are not available we wrap the content in this class
    #{$no-query} & {
      // The content contained within the call to our mixin
      @content;
    }
  }

}

/**
 *
 * This method returns the content wrapped in the requested media query. It also checks to see if
 * the no-query variable has been defined. If the variable exists the content is output and wrapped
 * in a class as defined by the variable.
 *
 * The $no-query defined class is to wrap content in when there are no media queries available for
 * the current browser. This is typically provided by a javascript plugin like modernizr.
 *
 * $bp: The breakpoint in pixels
 *
 * $no-ie: To override this breakpoint and not use it in browsers that don't support media queries
 * pass true as the second argument.
 *
 */
@mixin max-breakpoint($bp, $no-ie: false) {

  // Pass the given content and wrap it in a min-width media query
  @media (max-width: #{$bp}) {
    // The content contained within the call to our mixin
    @content;
  }

  // Check to see if we have defined the no-query variable
  @if variable-exists(no-query) and $no-ie == false {
    // If media queries are not available we wrap the content in this class
    #{$no-query} & {
      // The content contained within the call to our mixin
      @content;
    }
  }
}

@mixin height-breakpoint($bp-height, $bp-width, $no-ie: false) {

  // Pass the given content and wrap it in a min-width media query
  @media screen and (min-width: #{$bp-width}) and (min-height: #{$bp-height}) {
    // The content contained within the call to our mixin
    @content;
  }

  // Check to see if we have defined the no-query variable
  @if variable-exists(no-query) and $no-ie == false {
    // If media queries are not available we wrap the content in this class
    #{$no-query} & {
      // The content contained within the call to our mixin
      @content;
    }
  }

}